#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    macros {
        dongle_bootload_macro: bootload_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>;
            label = "BOOTLOAD_MACRO";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <27 28>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <31 32>;
            timeout-ms = <50>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
            timeout-ms = <50>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
            timeout-ms = <50>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <3 4>;
            timeout-ms = <50>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 8>;
            timeout-ms = <50>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <3 16>;
            timeout-ms = <50>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <17 18>;
            timeout-ms = <50>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <19 8>;
        };

        layer-mouse {
            bindings = <&to 5>;
            key-positions = <39 31 32>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "tap-preferred";
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
&mt LEFT_ALT ESC  &kp Q  &kp W  &kp E         &kp R         &kp T         &kp Y  &kp U         &kp I          &kp O    &kp P               &kp DEL
&mt LCTRL TAB     &kp A  &kp S  &kp D         &kp F         &kp G         &kp H  &kp J         &kp K          &kp L    &kp COLON           &kp SQT
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C         &kp V         &kp B         &kp N  &kp M         &kp COMMA      &kp DOT  &as QUESTION SLASH  &kp RIGHT_SHIFT
                                &kp LEFT_WIN  &ltq 3 ENTER  &ltq 2 SPACE         &ltq 1 ENTER  &kp BACKSPACE
            >;
        };

        Lower {
            label = "Lower";
            bindings = <
&none  &kp LG(D)  &kp LA(A)  &kp UP     &kp DELETE  &trans     &trans     &kp N7  &kp N8      &kp N9  &trans  &none
&none  &kp LC(A)  &kp LEFT   &kp DOWN   &kp RIGHT   &trans     &kp EQUAL  &kp N4  &kp N5      &kp N6  &trans  &none
&none  &kp LC(Z)  &kp LC(X)  &kp RC(C)  &kp LC(V)   &kp LG(V)  &kp MINUS  &kp N1  &kp N2      &kp N3  &trans  &none
                             &trans     &trans      &trans                &kp N0  &kp PERIOD
            >;
        };

        Raise {
            label = "Raise";
            bindings = <
&none  &trans     &trans      &kp C_VOL_UP  &kp DELETE    &trans     &none  &none      &trans     &none      &none  &none
&none  &kp LSHFT  &kp C_PREV  &kp C_PP      &kp C_NEXT    &none      &none  &mkp LCLK  &mkp MCLK  &mkp RCLK  &none  &none
&none  &kp CAPS   &kp TAB     &kp C_VOL_DN  &kp LEFT_ALT  &kp LCTRL  &none  &none      &none      &none      &none  &none
                              &trans        &trans        &trans            &trans     &trans
            >;
        };

        Shortcut {
            label = "shortcut";
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none  &none   &trans  &none  &none  &none
&none  &bt BT_CLR    &bt BT_NXT    &none         &none         &none         &none  &none   &none   &none  &none  &none
&none  &none         &none         &trans        &trans        &none         &none  &none   &none   &none  &none  &none
                                   &trans        &trans        &trans               &trans  &trans
            >;
        };

        Game {
            label = "Game";
            bindings = <
&none  &none   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans  &none   &none   &none   &none   &none   &none
&none  &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none
                       &none   &none   &none           &none   &none
            >;
        };

        Mouse {
            bindings = <
&none  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans     &trans  &none
&none  &trans  &trans  &trans  &trans  &trans  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans     &trans  &none
                       &trans  &trans  &trans          &trans     &to 0
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        game {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
